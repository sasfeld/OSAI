ID: 1950
CREATION_DATETIME: 1370469600000
MODIFICATION_DATETIME: 1370469600000
TITLE: Hallo,

könntest Du da bitte noch etwas genauer drauf eingehen, in welchem Zusammenhang die Frage s...
PARENT_POSTING_ID: 1947
POSTING_TYPE: answer
CONTENT:
Hallo,
könntest Du <NAME_CORPUS_REPLACEMENT> bitte noch etwas genauer drauf eingehen, in welchem Zusammenhang die Frage steht? Meine Vermutung ist die:
Klar kann man eine Tiefensortierung auf Basis <NAME_CORPUS_REPLACEMENT> Polygonen machen, nur hätte das entscheidende Nachteile und Unklarheiten:
1. Wie entscheidet man, welche Tiefe ein Polygon hat? Klar ist das Polygon immer planar, aber es kann entlang seiner Oberfläche trotzdem in der Tiefe variieren. Den Mittelpunkt zu nehmen würde bei großen Polygonen nicht funktionieren und wenn man beginnt, jede Polygonecke einzusortieren ist unklar, wie das Polygon dann zu zeichnen ist. Schau auch mal in das CG1-Skript. <NAME_CORPUS_REPLACEMENT> ist irgendwo eine Abbildung mit 4 Dreiecken zu sehen, die entlang der Kanten eines Quadrates gehen und dessen Spitzen jeweils das nächste überdecken. Einen solchen Fall könnte man mit einer Tiefensortierung wohl nicht erschlagen. Vermutlich ist dieses Bild auch das, worauf die Frage abzielt.
2. Letzter Punkt beschreibt auch das nächste Problem: Was macht man, wenn sich zwei Polygone durchdringen? Bei Sortierung auf Polygonebene müsste man dann die Polygone genau an den Schnittkanten in 2 aufteilen - das klappt aber nur in wenigen Fällen und ist unendlich aufwendig.
3. Unter Umständen werden sehr viele Polygone gerendert. Jedes müsste man dann in eine geordnete Liste einsortieren. Das könnte sehr rechenintensiv sein. Ist aber eher ein schwächeres Argument.
4. Die bildbasierten Renderverfahren, also so wie es OpenGL und DirectX sind, basieren auf dem Painters-Algorithmus, bei dem verdeckte Polygone einfach übergezeichnet werden. Der zeichnet zwar im Normalfall viele Polygone, die hinterher komplett verdeckt werden, ist aber sehr einfach aus algorithmischer Sicht und vor allem extrem gut pro Pixel parallelisierbar. Nutzt man einen Tiefenpuffer pro Pixel hat man alle Vorteile übernommen: man kann durch eine einfache Vergleichsoperation pro Zeichnen sehr leicht entscheiden, ob ein Fragment gemalt werden soll oder nicht... und das für jeden Pixel unabhängig, was eben eine enorme Parallelisierbarkeit ermöglicht.
<REMOVED_PERSON_ENTITY>
TAGGED_CONTENT:
