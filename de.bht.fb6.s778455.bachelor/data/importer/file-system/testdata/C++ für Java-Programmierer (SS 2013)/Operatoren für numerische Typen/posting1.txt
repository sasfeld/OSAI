CREATION_DATETIME: 1368352139
CONTENT: 
Aufgrund des Codes, den ich bisher zur Aufgabe 2.1 gesehen habe, noch ein kleiner Tipp: bauen Sie möglichst wenige redundante Operatoren in Ihre Typen ein. Die Idee bei Days, Months und Years ist, dass es sich jeweils nur um einen einfachen Wrapper für einen Integer handelt. Durch den Konstruktor und den Cast-Operator können die Objekte in Integer verwandelt werden (und umgekehrt), und in C++ wird sehr viel IMPLIZIT umgewandelt.  D.h. Sie müssen z.B. keinen Vergleichsoperator oder +-Operator zwischen zwei Months-Objekten implementieren, wenn die Objekte sich automatisch in unsigned int umwandeln können. Beispiel:

Days a(5), b(6);
assert(a!=b);

Was passiert hier? Zunächst würde der Compiler schauen, ob es Days::operator!=(Days) gibt. Wenn nicht, schaut der Compiler, in was er b umwandeln kann, und schaut für alle möglichen Typen Tb, ob Days::operator!=(Tb) existiert. Wenn auch das nicht geht, überprüft der Compiler auch noch sämtliche Umwandlungen von a in einen Typ Ta, und schaut welcher operator!=(Ta,Tb) existiert.

Wenn Sie also einen Days::operator unsigned int() implementiert haben, dann wird der Compiler fündig: der eingebaute operator!=(unsigned int, unsigned int) kann verwendet werden, weil sowohl a als auch b in unsigned int umwandelbar sind.

Alles klar? Also, Sie müssen eigentlich nur die in der Aufgabenstellung gelisteten Operatoren umsetzen, dann sollte es gehen.

Viel Erfolg und noch einen schönen Sonntag

 

Hartmut Schirmacher