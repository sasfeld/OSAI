/**
 * Copyright (c) 2013-2014 Sascha Feldmann (sascha.feldmann@gmx.de) 
 */
package de.bht.fb6.s778455.bachelor.model;

import java.io.Serializable;
import java.util.Date;
import java.util.List;

import de.bht.fb6.s778455.bachelor.model.Posting.TagType;
import de.bht.fb6.s778455.bachelor.statistics.AStatisticsBuilder;

/**
 * <p>StatisticsModels are generated by {@link AStatisticsBuilder}.</p>
 *
 * @author <a href="mailto:sascha.feldmann@gmx.de">Sascha Feldmann</a>
 * @since 09.01.2014
 *
 */
public class StatisticsModel implements IDirectoryPortable, Serializable {
	private static final long serialVersionUID = 1L;

	/**
	 * Creation date of the statistics model.
	 */
	protected Date dateCreation;
	
	/**
	 * Number of given courses.
	 */
	protected int numberCourses;
	/**
	 * Number of given boards.
	 */
	protected int numberBoards;
	/**
	 * Number of given threads.
	 */
	protected int numberThreads;
	/**
	 * Number of given postings.
	 */
	protected int numberPostings;
	
	/**
	 * Number of postings which have Tags extracted by Topic Zoom.
	 */
	protected int numberTopicZoomTaggedPostings;
	/**
	 * Number of postings which have NER tags.
	 */
	protected int numberNerTaggedPostings;
	/**
	 * Number of postings which have at least one tag.
	 */
	protected int numberTaggedPostings;
	
	/**
	 * Number of {@link TopicZoomTag} instances.
	 */
	protected int numberTopicZoomTags;
	/**
	 * Number of {@link Tag} instances with {@link TagType} NER-Tag .
	 */
	protected int numberNerTags;
	/**
	 * Number of {@link Tag} instances.
	 */
	protected int numberTags;
	/**
	 * Number of distinct {@link TopicZoomTag} tags. Distinct means: the URI and the value are equal, so only count it once.
	 */
	protected int numberDistinctTopicZoomTags;
	/**
	 * Number of distinct {@link Tag} instances representing NER tags. Distinct means: the URI and the value are equal, so only count it once.
	 */
	protected int numberDistinctNerTags;

	/**
	 * Number of {@link Posting} instances which have both - {@link TopicZoomTag} and {@link Tag} representing NER tags.
	 */
	protected int numberTzAndNerTaggedPostings;
	
	/**
	 * {@link List} of all {@link Posting} which don't have any {@link Tag}.
	 */
	protected List< Posting > untaggedPostings;
	
	/**
	 * @return the dateCreation
	 */
	public final Date getDateCreation() {
		return dateCreation;
	}
	/**
	 * @param dateCreation the dateCreation to set
	 * @return 
	 */
	public final StatisticsModel setDateCreation( final Date dateCreation ) {
		this.dateCreation = dateCreation;
		
		return this;
	}
	/**
	 * @return the numberCourses
	 */
	public final int getNumberCourses() {
		return numberCourses;
	}
	/**
	 * @param numberCourses the numberCourses to set
	 * @return 
	 */
	public final StatisticsModel setNumberCourses( final int numberCourses ) {
		this.numberCourses = numberCourses;
		
		return this;
	}
	/**
	 * @return the numberBoards
	 */
	public final int getNumberBoards() {
		return numberBoards;
	}
	/**
	 * @param numberBoards the numberBoards to set
	 * @return 
	 */
	public final StatisticsModel setNumberBoards( final int numberBoards ) {
		this.numberBoards = numberBoards;
		
		return this;
	}
	/**
	 * @return the numberThreads
	 */
	public final int getNumberThreads() {
		return numberThreads;
	}
	/**
	 * @param numberThreads the numberThreads to set
	 * @return 
	 */
	public final StatisticsModel setNumberThreads( final int numberThreads ) {
		this.numberThreads = numberThreads;
		
		return this;
	}
	/**
	 * @return the numberPostings
	 */
	public final int getNumberPostings() {
		return numberPostings;
	}
	/**
	 * @param numberPostings the numberPostings to set
	 * @return 
	 */
	public final StatisticsModel setNumberPostings( final int numberPostings ) {
		this.numberPostings = numberPostings;
		
		return this;
	}
	/**
	 * @return the numberTopicZoomTaggedPostings
	 */
	public final int getNumberTopicZoomTaggedPostings() {
		return numberTopicZoomTaggedPostings;
	}
	/**
	 * @param numberTopicZoomTaggedPostings the numberTopicZoomTaggedPostings to set
	 * @return 
	 */
	public final StatisticsModel setNumberTopicZoomTaggedPostings(
			final int numberTopicZoomTaggedPostings ) {
		this.numberTopicZoomTaggedPostings = numberTopicZoomTaggedPostings;
		
		return this;
	}
	/**
	 * @return the numberNerTaggedPostings
	 */
	public final int getNumberNerTaggedPostings() {
		return numberNerTaggedPostings;
	}
	/**
	 * @param numberNerTaggedPostings the numberNerTaggedPostings to set
	 * @return 
	 */
	public final StatisticsModel setNumberNerTaggedPostings( final int numberNerTaggedPostings ) {
		this.numberNerTaggedPostings = numberNerTaggedPostings;
		
		return this;
	}
	/**
	 * @return the numberTaggedPostings
	 */
	public final int getNumberTaggedPostings() {
		return numberTaggedPostings;
	}
	/**
	 * @param numberTaggedPostings the numberTaggedPostings to set
	 * @return 
	 */
	public final StatisticsModel setNumberTaggedPostings( final int numberTaggedPostings ) {
		this.numberTaggedPostings = numberTaggedPostings;
		
		return this;
	}
	
	public StatisticsModel setNumberTzAndNerTaggedPostings( int numberPostingsTzAndNerTags ) {
		this.numberTzAndNerTaggedPostings = numberPostingsTzAndNerTags;
		
		return this;
	}
	
	/**
	 * 
	 * @return the number of postings which are both - NER and TopicZoom tagged.
	 */
	public int getNumberTzAndNerTaggedPostings() {
		return this.numberNerTaggedPostings;
	}
	
	/**
	 * @return the numberTopicZoomTags
	 */
	public final int getNumberTopicZoomTags() {
		return numberTopicZoomTags;
	}
	
	/**
	 * @param numberTopicZoomTags the numberTopicZoomTags to set
	 * @return 
	 */
	public final StatisticsModel setNumberTopicZoomTags( int numberTopicZoomTags ) {
		this.numberTopicZoomTags = numberTopicZoomTags;
		
		return this;
	}
	
	/**
	 * @return the numberNerTags
	 */
	public final int getNumberNerTags() {
		return numberNerTags;
	}
	
	/**
	 * @param numberNerTags the numberNerTags to set
	 * @return 
	 */
	public final StatisticsModel setNumberNerTags( int numberNerTags ) {
		this.numberNerTags = numberNerTags;
		
		return this;
	}
	
	/**
	 * @return the numberTags
	 */
	public final int getNumberTags() {
		return numberTags;
	}
	
	/**	 
	 * @param numberTags the numberTags to set
	 * @return 
	 */
	public final StatisticsModel setNumberTags( int numberTags ) {
		this.numberTags = numberTags;
		
		return this;
	}
	
	/**
	 * @return the numberDistinctTopicZoomTags
	 */
	public final int getNumberDistinctTopicZoomTags() {
		return numberDistinctTopicZoomTags;
	}
	
	/**
	 * @param numberDistinctTopicZoomTags the numberDistinctTopicZoomTags to set
	 * @return 
	 */
	public final StatisticsModel setNumberDistinctTopicZoomTags(
			int numberDistinctTopicZoomTags ) {
		this.numberDistinctTopicZoomTags = numberDistinctTopicZoomTags;
		
		return this;
	}
	
	/**
	 * @return the numberDistinctNerTags
	 */
	public final int getNumberDistinctNerTags() {
		return numberDistinctNerTags;
	}
	
	/**
	 * @param numberDistinctNerTags the numberDistinctNerTags to set
	 * @return 
	 */
	public final StatisticsModel setNumberDistinctNerTags( int numberDistinctNerTags ) {
		this.numberDistinctNerTags = numberDistinctNerTags;
		
		return this;
	}
	
	/**
	 * @return the untaggedPostings
	 */
	public final List< Posting > getUntaggedPostings() {
		return untaggedPostings;
	}
	
	/**
	 * @param untaggedPostings the untaggedPostings to set
	 * @return 
	 */
	public final StatisticsModel setUntaggedPostings( List< Posting > untaggedPostings ) {
		this.untaggedPostings = untaggedPostings;
		
		return this;
	}
	
	/* (non-Javadoc)
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result
				+ ( ( dateCreation == null ) ? 0 : dateCreation.hashCode() );
		result = prime * result + numberBoards;
		result = prime * result + numberCourses;
		result = prime * result + numberDistinctNerTags;
		result = prime * result + numberDistinctTopicZoomTags;
		result = prime * result + numberNerTaggedPostings;
		result = prime * result + numberNerTags;
		result = prime * result + numberPostings;
		result = prime * result + numberTaggedPostings;
		result = prime * result + numberTags;
		result = prime * result + numberThreads;
		result = prime * result + numberTopicZoomTaggedPostings;
		result = prime * result + numberTopicZoomTags;
		result = prime * result + numberTzAndNerTaggedPostings;
		result = prime
				* result
				+ ( ( untaggedPostings == null ) ? 0 : untaggedPostings
						.hashCode() );
		return result;
	}
	/* (non-Javadoc)
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals( Object obj ) {
		if( this == obj )
			return true;
		if( obj == null )
			return false;
		if( getClass() != obj.getClass() )
			return false;
		StatisticsModel other = ( StatisticsModel ) obj;
		if( dateCreation == null ) {
			if( other.dateCreation != null )
				return false;
		} else if( !dateCreation.equals( other.dateCreation ) )
			return false;
		if( numberBoards != other.numberBoards )
			return false;
		if( numberCourses != other.numberCourses )
			return false;
		if( numberDistinctNerTags != other.numberDistinctNerTags )
			return false;
		if( numberDistinctTopicZoomTags != other.numberDistinctTopicZoomTags )
			return false;
		if( numberNerTaggedPostings != other.numberNerTaggedPostings )
			return false;
		if( numberNerTags != other.numberNerTags )
			return false;
		if( numberPostings != other.numberPostings )
			return false;
		if( numberTaggedPostings != other.numberTaggedPostings )
			return false;
		if( numberTags != other.numberTags )
			return false;
		if( numberThreads != other.numberThreads )
			return false;
		if( numberTopicZoomTaggedPostings != other.numberTopicZoomTaggedPostings )
			return false;
		if( numberTopicZoomTags != other.numberTopicZoomTags )
			return false;
		if( numberTzAndNerTaggedPostings != other.numberTzAndNerTaggedPostings )
			return false;
		if( untaggedPostings == null ) {
			if( other.untaggedPostings != null )
				return false;
		} else if( !untaggedPostings.equals( other.untaggedPostings ) )
			return false;
		return true;
	}
	
	/* (non-Javadoc)
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		StringBuilder builder = new StringBuilder();
		builder.append( "StatisticsModel [getDateCreation()=" );
		builder.append( getDateCreation() );
		builder.append( ", getNumberCourses()=" );
		builder.append( getNumberCourses() );
		builder.append( ", getNumberBoards()=" );
		builder.append( getNumberBoards() );
		builder.append( ", getNumberThreads()=" );
		builder.append( getNumberThreads() );
		builder.append( ", getNumberPostings()=" );
		builder.append( getNumberPostings() );
		builder.append( ", getNumberTopicZoomTaggedPostings()=" );
		builder.append( getNumberTopicZoomTaggedPostings() );
		builder.append( ", getNumberNerTaggedPostings()=" );
		builder.append( getNumberNerTaggedPostings() );
		builder.append( ", getNumberTaggedPostings()=" );
		builder.append( getNumberTaggedPostings() );
		builder.append( ", getNumberTzAndNerTaggedPostings()=" );
		builder.append( getNumberTzAndNerTaggedPostings() );
		builder.append( ", getNumberTopicZoomTags()=" );
		builder.append( getNumberTopicZoomTags() );
		builder.append( ", getNumberNerTags()=" );
		builder.append( getNumberNerTags() );
		builder.append( ", getNumberTags()=" );
		builder.append( getNumberTags() );
		builder.append( ", getNumberDistinctTopicZoomTags()=" );
		builder.append( getNumberDistinctTopicZoomTags() );
		builder.append( ", getNumberDistinctNerTags()=" );
		builder.append( getNumberDistinctNerTags() );
		builder.append( ", getUntaggedPostings()=" );
		builder.append( getUntaggedPostings() );
		builder.append( "]" );
		return builder.toString();
	}
	
	@Override
	public String exportToTxt() {
		return this.toString();
	}
	
	@Override
	public void importFromTxt( String key, String value ) {
		throw new UnsupportedOperationException("importFromTxt() is not supported. Use serialization instead.");		
	}	

		
}
